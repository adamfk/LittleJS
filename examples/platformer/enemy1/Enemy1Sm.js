// Autogenerated with StateSmith 0.11.2-alpha+4a4e30018e9a371124530fa96cf2ba3322b80459.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in this `FileTop` section will end up 
// being printed at the top of every generated code file.


// Generated state machine
class Enemy1Sm
{
    static EventId = 
    {
        EVENT1 : 0,
        EVENT2 : 1,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 2;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        STATE1 : 1,
        STATE2 : 2,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 3;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(Enemy1Sm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        count: 0, // this var can be referenced in diagram
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(State1)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `State1`.
                this.#STATE1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy1Sm.StateId.STATE1;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state STATE1
    ////////////////////////////////////////////////////////////////////////////////
    
    #STATE1_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#STATE1_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.EVENT1] = this.#STATE1_event1;
        
        // State1 behavior
        // uml: enter / { count++; }
        {
            // Step 1: execute action `count++;`
            this.vars.count++;
        } // end of behavior for State1
    }
    
    #STATE1_exit()
    {
        // State1 behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for State1
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.EVENT1] = null;  // no ancestor listens to this event
    }
    
    #STATE1_event1()
    {
        // No ancestor state handles `event1` event.
        
        // State1 behavior
        // uml: event1 TransitionTo(State2)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#STATE1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `State2`.
            this.#STATE2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.STATE2;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for State1
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state STATE2
    ////////////////////////////////////////////////////////////////////////////////
    
    #STATE2_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#STATE2_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.EVENT2] = this.#STATE2_event2;
        
        // State2 behavior
        // uml: enter / { count += 10; }
        {
            // Step 1: execute action `count += 10;`
            this.vars.count += 10;
        } // end of behavior for State2
    }
    
    #STATE2_exit()
    {
        // State2 behavior
        // uml: exit
        {
            // Step 1: execute action ``
        } // end of behavior for State2
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.EVENT2] = null;  // no ancestor listens to this event
    }
    
    #STATE2_event2()
    {
        // No ancestor state handles `event2` event.
        
        // State2 behavior
        // uml: event2 TransitionTo(State1)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#STATE2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `State1`.
            this.#STATE1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.STATE1;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for State2
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case Enemy1Sm.StateId.ROOT: return "ROOT";
            case Enemy1Sm.StateId.STATE1: return "STATE1";
            case Enemy1Sm.StateId.STATE2: return "STATE2";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case Enemy1Sm.EventId.EVENT1: return "EVENT1";
            case Enemy1Sm.EventId.EVENT2: return "EVENT2";
            default: return "?";
        }
    }
}
