// Autogenerated with StateSmith 0.11.2-alpha+4a4e30018e9a371124530fa96cf2ba3322b80459.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class Enemy1Sm
{
    static EventId = 
    {
        DO : 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        DAMAGED : 1,
        HEARD_SHOT : 2,
        HIT_PLAYER : 3,
        PLAYER_DEAD : 4,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 5;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        HIT_CELEBRATION : 1,
        HUNTING : 2,
        INITIAL : 3,
        JUMP_AROUND : 4,
        PATROL : 5,
        PATROL_END_DELAY : 6,
        PATROL_END_HOP : 7,
        PATROL_MARCH : 8,
        SLEEPING : 9,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 10;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(Enemy1Sm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        timer: new Timer(0),
        obj: null, // need to set this to instance of Enemy1 before calling start()
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(INITIAL)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `INITIAL`.
                this.#INITIAL_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy1Sm.StateId.INITIAL;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DAMAGED] = this.#ROOT_damaged;
        this.#currentEventHandlers[Enemy1Sm.EventId.HEARD_SHOT] = this.#ROOT_heard_shot;
        this.#currentEventHandlers[Enemy1Sm.EventId.HIT_PLAYER] = this.#ROOT_hit_player;
    }
    
    #ROOT_exit()
    {
    }
    
    #ROOT_damaged()
    {
        // No ancestor state handles `damaged` event.
        
        // ROOT behavior
        // uml: DAMAGED TransitionTo(HUNTING)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.HUNTING;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for ROOT
    }
    
    #ROOT_heard_shot()
    {
        // No ancestor state handles `heard_shot` event.
        
        // ROOT behavior
        // uml: HEARD_SHOT TransitionTo(JUMP_AROUND)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `JUMP_AROUND`.
            this.#JUMP_AROUND_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.JUMP_AROUND;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for ROOT
    }
    
    #ROOT_hit_player()
    {
        // No ancestor state handles `hit_player` event.
        
        // ROOT behavior
        // uml: HIT_PLAYER TransitionTo(HIT_CELEBRATION)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HIT_CELEBRATION`.
            this.#HIT_CELEBRATION_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.HIT_CELEBRATION;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for ROOT
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HIT_CELEBRATION
    ////////////////////////////////////////////////////////////////////////////////
    
    #HIT_CELEBRATION_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#HIT_CELEBRATION_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#HIT_CELEBRATION_do;
        this.#currentEventHandlers[Enemy1Sm.EventId.HIT_PLAYER] = this.#HIT_CELEBRATION_hit_player;
        
        // HIT_CELEBRATION behavior
        // uml: enter / { obj.swellSpeed = 60; }
        {
            // Step 1: execute action `obj.swellSpeed = 60;`
            this.vars.obj.swellSpeed = 60;
        } // end of behavior for HIT_CELEBRATION
        
        // HIT_CELEBRATION behavior
        // uml: enter / { timer.set(2); }
        {
            // Step 1: execute action `timer.set(2);`
            this.vars.timer.set(2);
        } // end of behavior for HIT_CELEBRATION
    }
    
    #HIT_CELEBRATION_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy1Sm.EventId.HIT_PLAYER] = this.#ROOT_hit_player;  // the next ancestor that handles this event is ROOT
    }
    
    #HIT_CELEBRATION_do()
    {
        // No ancestor state handles `do` event.
        
        // HIT_CELEBRATION behavior
        // uml: do [timer.elapsed()] TransitionTo(SLEEPING)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#HIT_CELEBRATION_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING`.
            this.#SLEEPING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.SLEEPING;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for HIT_CELEBRATION
    }
    
    #HIT_CELEBRATION_hit_player()
    {
        // Setup handler for next ancestor that listens to `hit_player` event.
        this.#ancestorEventHandler = this.#ROOT_hit_player;
        
        // HIT_CELEBRATION behavior
        // uml: HIT_PLAYER
        {
            // Step 1: execute action ``
            // Step 2: determine if ancestor gets to handle event next.
            this.#ancestorEventHandler = null;  // consume event
        } // end of behavior for HIT_CELEBRATION
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HUNTING
    ////////////////////////////////////////////////////////////////////////////////
    
    #HUNTING_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#HUNTING_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#HUNTING_do;
        this.#currentEventHandlers[Enemy1Sm.EventId.HEARD_SHOT] = this.#HUNTING_heard_shot;
        this.#currentEventHandlers[Enemy1Sm.EventId.PLAYER_DEAD] = this.#HUNTING_player_dead;
        
        // HUNTING behavior
        // uml: enter / { obj.swellSpeed = 30; }
        {
            // Step 1: execute action `obj.swellSpeed = 30;`
            this.vars.obj.swellSpeed = 30;
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: enter / { timer.set(rand(5,15)); }
        {
            // Step 1: execute action `timer.set(rand(5,15));`
            this.vars.timer.set(rand(5,15));
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: enter / { obj.stallTracker.reset(); }
        {
            // Step 1: execute action `obj.stallTracker.reset();`
            this.vars.obj.stallTracker.reset();
        } // end of behavior for HUNTING
    }
    
    #HUNTING_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy1Sm.EventId.HEARD_SHOT] = this.#ROOT_heard_shot;  // the next ancestor that handles this event is ROOT
        this.#currentEventHandlers[Enemy1Sm.EventId.PLAYER_DEAD] = null;  // no ancestor listens to this event
    }
    
    #HUNTING_do()
    {
        // No ancestor state handles `do` event.
        
        // HUNTING behavior
        // uml: do / { obj.stallTracker.update(); }
        {
            // Step 1: execute action `obj.stallTracker.update();`
            this.vars.obj.stallTracker.update();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do / { obj.doHuntPlayer(); }
        {
            // Step 1: execute action `obj.doHuntPlayer();`
            this.vars.obj.doHuntPlayer();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for HUNTING
        
        // HUNTING behavior
        // uml: do [timer.elapsed()] TransitionTo(JUMP_AROUND)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#HUNTING_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `JUMP_AROUND`.
            this.#JUMP_AROUND_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.JUMP_AROUND;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for HUNTING
    }
    
    #HUNTING_heard_shot()
    {
        // Setup handler for next ancestor that listens to `heard_shot` event.
        this.#ancestorEventHandler = this.#ROOT_heard_shot;
        
        // HUNTING behavior
        // uml: HEARD_SHOT
        {
            // Step 1: execute action ``
            // Step 2: determine if ancestor gets to handle event next.
            this.#ancestorEventHandler = null;  // consume event
        } // end of behavior for HUNTING
    }
    
    #HUNTING_player_dead()
    {
        // No ancestor state handles `player_dead` event.
        
        // HUNTING behavior
        // uml: PLAYER_DEAD TransitionTo(SLEEPING)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#HUNTING_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING`.
            this.#SLEEPING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.SLEEPING;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for HUNTING
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state INITIAL
    ////////////////////////////////////////////////////////////////////////////////
    
    #INITIAL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#INITIAL_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#INITIAL_do;
        
        // INITIAL behavior
        // uml: enter / { obj.swellSpeed = 2; }
        {
            // Step 1: execute action `obj.swellSpeed = 2;`
            this.vars.obj.swellSpeed = 2;
        } // end of behavior for INITIAL
    }
    
    #INITIAL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #INITIAL_do()
    {
        // No ancestor state handles `do` event.
        
        // INITIAL behavior
        // uml: do [obj.playerDist() <= 8] TransitionTo(PATROL)
        if (this.vars.obj.playerDist() <= 8)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#INITIAL_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `PATROL`.
            this.#PATROL_enter();
            
            // PATROL.<InitialState> behavior
            // uml: TransitionTo(PATROL_MARCH)
            {
                // Step 1: Exit states until we reach `PATROL` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `PATROL_MARCH`.
                this.#PATROL_MARCH_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy1Sm.StateId.PATROL_MARCH;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for PATROL.<InitialState>
        } // end of behavior for INITIAL
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state JUMP_AROUND
    ////////////////////////////////////////////////////////////////////////////////
    
    #JUMP_AROUND_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#JUMP_AROUND_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#JUMP_AROUND_do;
        this.#currentEventHandlers[Enemy1Sm.EventId.HEARD_SHOT] = this.#JUMP_AROUND_heard_shot;
        
        // JUMP_AROUND behavior
        // uml: enter / { obj.swellSpeed = 8; }
        {
            // Step 1: execute action `obj.swellSpeed = 8;`
            this.vars.obj.swellSpeed = 8;
        } // end of behavior for JUMP_AROUND
        
        // JUMP_AROUND behavior
        // uml: enter / { timer.set(rand(4, 6)); }
        {
            // Step 1: execute action `timer.set(rand(4, 6));`
            this.vars.timer.set(rand(4, 6));
        } // end of behavior for JUMP_AROUND
    }
    
    #JUMP_AROUND_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Enemy1Sm.EventId.HEARD_SHOT] = this.#ROOT_heard_shot;  // the next ancestor that handles this event is ROOT
    }
    
    #JUMP_AROUND_do()
    {
        // No ancestor state handles `do` event.
        
        // JUMP_AROUND behavior
        // uml: do / { obj.jumpAround(); }
        {
            // Step 1: execute action `obj.jumpAround();`
            this.vars.obj.jumpAround();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for JUMP_AROUND
        
        // JUMP_AROUND behavior
        // uml: do [timer.elapsed()] TransitionTo(SLEEPING)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#JUMP_AROUND_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING`.
            this.#SLEEPING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.SLEEPING;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for JUMP_AROUND
        
        // JUMP_AROUND behavior
        // uml: do [obj.playerDist() <= 4] TransitionTo(HUNTING)
        if (this.vars.obj.playerDist() <= 4)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#JUMP_AROUND_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.HUNTING;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for JUMP_AROUND
    }
    
    #JUMP_AROUND_heard_shot()
    {
        // Setup handler for next ancestor that listens to `heard_shot` event.
        this.#ancestorEventHandler = this.#ROOT_heard_shot;
        
        // JUMP_AROUND behavior
        // uml: HEARD_SHOT TransitionTo(HUNTING)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#JUMP_AROUND_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `HUNTING`.
            this.#HUNTING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.HUNTING;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for JUMP_AROUND
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PATROL
    ////////////////////////////////////////////////////////////////////////////////
    
    #PATROL_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#PATROL_exit;
        
        // PATROL behavior
        // uml: enter / { obj.swellSpeed = 4; }
        {
            // Step 1: execute action `obj.swellSpeed = 4;`
            this.vars.obj.swellSpeed = 4;
        } // end of behavior for PATROL
    }
    
    #PATROL_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PATROL_END_DELAY
    ////////////////////////////////////////////////////////////////////////////////
    
    #PATROL_END_DELAY_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#PATROL_END_DELAY_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#PATROL_END_DELAY_do;
        
        // PATROL_END_DELAY behavior
        // uml: enter / { timer.set(0.5); }
        {
            // Step 1: execute action `timer.set(0.5);`
            this.vars.timer.set(0.5);
        } // end of behavior for PATROL_END_DELAY
    }
    
    #PATROL_END_DELAY_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#PATROL_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #PATROL_END_DELAY_do()
    {
        // No ancestor state handles `do` event.
        
        // PATROL_END_DELAY behavior
        // uml: do [timer.elapsed()] TransitionTo(PATROL_END_HOP)
        if (this.vars.timer.elapsed())
        {
            // Step 1: Exit states until we reach `PATROL` state (Least Common Ancestor for transition).
            this.#PATROL_END_DELAY_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `PATROL_END_HOP`.
            this.#PATROL_END_HOP_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.PATROL_END_HOP;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for PATROL_END_DELAY
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PATROL_END_HOP
    ////////////////////////////////////////////////////////////////////////////////
    
    #PATROL_END_HOP_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#PATROL_END_HOP_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#PATROL_END_HOP_do;
        
        // PATROL_END_HOP behavior
        // uml: enter / { obj.smallVerticalHop(); }
        {
            // Step 1: execute action `obj.smallVerticalHop();`
            this.vars.obj.smallVerticalHop();
        } // end of behavior for PATROL_END_HOP
    }
    
    #PATROL_END_HOP_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#PATROL_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #PATROL_END_HOP_do()
    {
        // No ancestor state handles `do` event.
        
        // PATROL_END_HOP behavior
        // uml: do [obj.groundObject] / { obj.patrolTurn(); } TransitionTo(PATROL_MARCH)
        if (this.vars.obj.groundObject)
        {
            // Step 1: Exit states until we reach `PATROL` state (Least Common Ancestor for transition).
            this.#PATROL_END_HOP_exit();
            
            // Step 2: Transition action: `obj.patrolTurn();`.
            this.vars.obj.patrolTurn();
            
            // Step 3: Enter/move towards transition target `PATROL_MARCH`.
            this.#PATROL_MARCH_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.PATROL_MARCH;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for PATROL_END_HOP
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PATROL_MARCH
    ////////////////////////////////////////////////////////////////////////////////
    
    #PATROL_MARCH_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#PATROL_MARCH_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#PATROL_MARCH_do;
        
        // PATROL_MARCH behavior
        // uml: enter / { obj.stallTracker.reset(); }
        {
            // Step 1: execute action `obj.stallTracker.reset();`
            this.vars.obj.stallTracker.reset();
        } // end of behavior for PATROL_MARCH
    }
    
    #PATROL_MARCH_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#PATROL_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #PATROL_MARCH_do()
    {
        // No ancestor state handles `do` event.
        
        // PATROL_MARCH behavior
        // uml: do / { obj.stallTracker.update(); }
        {
            // Step 1: execute action `obj.stallTracker.update();`
            this.vars.obj.stallTracker.update();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for PATROL_MARCH
        
        // PATROL_MARCH behavior
        // uml: do / { obj.doPatrolMarch(); }
        {
            // Step 1: execute action `obj.doPatrolMarch();`
            this.vars.obj.doPatrolMarch();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for PATROL_MARCH
        
        // PATROL_MARCH behavior
        // uml: do [obj.isPatrolEnd()] TransitionTo(PATROL_END_DELAY)
        if (this.vars.obj.isPatrolEnd())
        {
            // Step 1: Exit states until we reach `PATROL` state (Least Common Ancestor for transition).
            this.#PATROL_MARCH_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `PATROL_END_DELAY`.
            this.#PATROL_END_DELAY_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.PATROL_END_DELAY;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for PATROL_MARCH
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SLEEPING
    ////////////////////////////////////////////////////////////////////////////////
    
    #SLEEPING_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SLEEPING_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#SLEEPING_do;
        
        // SLEEPING behavior
        // uml: enter / { obj.swellSpeed = 2; }
        {
            // Step 1: execute action `obj.swellSpeed = 2;`
            this.vars.obj.swellSpeed = 2;
        } // end of behavior for SLEEPING
    }
    
    #SLEEPING_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #SLEEPING_do()
    {
        // No ancestor state handles `do` event.
        
        // SLEEPING behavior
        // uml: do [obj.playerDist() <= 8] TransitionTo(JUMP_AROUND)
        if (this.vars.obj.playerDist() <= 8)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#SLEEPING_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `JUMP_AROUND`.
            this.#JUMP_AROUND_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.JUMP_AROUND;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SLEEPING
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case Enemy1Sm.StateId.ROOT: return "ROOT";
            case Enemy1Sm.StateId.HIT_CELEBRATION: return "HIT_CELEBRATION";
            case Enemy1Sm.StateId.HUNTING: return "HUNTING";
            case Enemy1Sm.StateId.INITIAL: return "INITIAL";
            case Enemy1Sm.StateId.JUMP_AROUND: return "JUMP_AROUND";
            case Enemy1Sm.StateId.PATROL: return "PATROL";
            case Enemy1Sm.StateId.PATROL_END_DELAY: return "PATROL_END_DELAY";
            case Enemy1Sm.StateId.PATROL_END_HOP: return "PATROL_END_HOP";
            case Enemy1Sm.StateId.PATROL_MARCH: return "PATROL_MARCH";
            case Enemy1Sm.StateId.SLEEPING: return "SLEEPING";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case Enemy1Sm.EventId.DAMAGED: return "DAMAGED";
            case Enemy1Sm.EventId.DO: return "DO";
            case Enemy1Sm.EventId.HEARD_SHOT: return "HEARD_SHOT";
            case Enemy1Sm.EventId.HIT_PLAYER: return "HIT_PLAYER";
            case Enemy1Sm.EventId.PLAYER_DEAD: return "PLAYER_DEAD";
            default: return "?";
        }
    }
}
