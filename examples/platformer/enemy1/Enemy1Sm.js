// Autogenerated with StateSmith 0.11.2-alpha+4a4e30018e9a371124530fa96cf2ba3322b80459.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class Enemy1Sm
{
    static EventId = 
    {
        DO : 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 1;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        AWAKE : 1,
        SLEEPING : 2,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 3;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(Enemy1Sm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        obj: null, // need to set this to instance of Enemy1 before calling start()
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(SLEEPING)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `SLEEPING`.
                this.#SLEEPING_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Enemy1Sm.StateId.SLEEPING;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state AWAKE
    ////////////////////////////////////////////////////////////////////////////////
    
    #AWAKE_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#AWAKE_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#AWAKE_do;
        
        // AWAKE behavior
        // uml: enter / { obj.swellSpeed = 8; }
        {
            // Step 1: execute action `obj.swellSpeed = 8;`
            this.vars.obj.swellSpeed = 8;
        } // end of behavior for AWAKE
    }
    
    #AWAKE_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #AWAKE_do()
    {
        // No ancestor state handles `do` event.
        
        // AWAKE behavior
        // uml: do / { obj.jumpAround(); }
        {
            // Step 1: execute action `obj.jumpAround();`
            this.vars.obj.jumpAround();
            
            // Step 2: determine if ancestor gets to handle event next.
            // Don't consume special `do` event.
        } // end of behavior for AWAKE
        
        // AWAKE behavior
        // uml: do [obj.playerDist() >= 9] TransitionTo(SLEEPING)
        if (this.vars.obj.playerDist() >= 9)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#AWAKE_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SLEEPING`.
            this.#SLEEPING_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.SLEEPING;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for AWAKE
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SLEEPING
    ////////////////////////////////////////////////////////////////////////////////
    
    #SLEEPING_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#SLEEPING_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = this.#SLEEPING_do;
        
        // SLEEPING behavior
        // uml: enter / { obj.swellSpeed = 2; }
        {
            // Step 1: execute action `obj.swellSpeed = 2;`
            this.vars.obj.swellSpeed = 2;
        } // end of behavior for SLEEPING
    }
    
    #SLEEPING_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Enemy1Sm.EventId.DO] = null;  // no ancestor listens to this event
    }
    
    #SLEEPING_do()
    {
        // No ancestor state handles `do` event.
        
        // SLEEPING behavior
        // uml: do [obj.playerDist() <= 6] TransitionTo(AWAKE)
        if (this.vars.obj.playerDist() <= 6)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#SLEEPING_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `AWAKE`.
            this.#AWAKE_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Enemy1Sm.StateId.AWAKE;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for SLEEPING
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case Enemy1Sm.StateId.ROOT: return "ROOT";
            case Enemy1Sm.StateId.AWAKE: return "AWAKE";
            case Enemy1Sm.StateId.SLEEPING: return "SLEEPING";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case Enemy1Sm.EventId.DO: return "DO";
            default: return "?";
        }
    }
}
